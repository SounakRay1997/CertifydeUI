{"ast":null,"code":"'use strict';\n\nclass QuickLRU {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!(options.maxSize && options.maxSize > 0)) {\n      throw new TypeError('`maxSize` must be a number greater than 0');\n    }\n\n    this.maxSize = options.maxSize;\n    this.cache = new Map();\n    this.oldCache = new Map();\n    this._size = 0;\n  }\n\n  _set(key, value) {\n    this.cache.set(key, value);\n    this._size++;\n\n    if (this._size >= this.maxSize) {\n      this._size = 0;\n      this.oldCache = this.cache;\n      this.cache = new Map();\n    }\n  }\n\n  get(key) {\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    }\n\n    if (this.oldCache.has(key)) {\n      const value = this.oldCache.get(key);\n      this.oldCache.delete(key);\n\n      this._set(key, value);\n\n      return value;\n    }\n  }\n\n  set(key, value) {\n    if (this.cache.has(key)) {\n      this.cache.set(key, value);\n    } else {\n      this._set(key, value);\n    }\n\n    return this;\n  }\n\n  has(key) {\n    return this.cache.has(key) || this.oldCache.has(key);\n  }\n\n  peek(key) {\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    }\n\n    if (this.oldCache.has(key)) {\n      return this.oldCache.get(key);\n    }\n  }\n\n  delete(key) {\n    const deleted = this.cache.delete(key);\n\n    if (deleted) {\n      this._size--;\n    }\n\n    return this.oldCache.delete(key) || deleted;\n  }\n\n  clear() {\n    this.cache.clear();\n    this.oldCache.clear();\n    this._size = 0;\n  }\n\n  *keys() {\n    for (const [key] of this) {\n      yield key;\n    }\n  }\n\n  *values() {\n    for (const [, value] of this) {\n      yield value;\n    }\n  }\n\n  *[Symbol.iterator]() {\n    for (const item of this.cache) {\n      yield item;\n    }\n\n    for (const item of this.oldCache) {\n      const [key] = item;\n\n      if (!this.cache.has(key)) {\n        yield item;\n      }\n    }\n  }\n\n  get size() {\n    let oldCacheSize = 0;\n\n    for (const key of this.oldCache.keys()) {\n      if (!this.cache.has(key)) {\n        oldCacheSize++;\n      }\n    }\n\n    return this._size + oldCacheSize;\n  }\n\n}\n\nmodule.exports = QuickLRU;","map":null,"metadata":{},"sourceType":"script"}